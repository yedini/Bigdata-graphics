###10/18 빅데이터###

library(tidyverse)
library(nycflights13)

flights

##filter함수 : 조건에 맞는 관측 선택하기, 논리연산자를 이용하여 자료를 선택한다.
filter(flights, month==1, day<=2)
filter(flights, month==1, day==1, dep_time <600)

A <- filter(flights, month==1, day==1, dep_time<600)


##수치연산 비교
#R이 못하는거: 정수를 루트화했다가 다시 제곱하면 원래 숫자랑 똑같은 숫자로 못받아들임.
sqrt(2)^2 ==2
[1] FALSE
#이럴때는 이 값과 거의 비슷한 값이 이게 맞는지를 확인해주는 near 함수 이용.
near(sqrt(2)^2, 2)
[1] TRUE

1/49 * 49 ==1
[1] FALSE
near(1/49*49, 1)
[1] TRUE

1/49*49-1 ==0
[1] FALSE  #값이 -1.110223e-16이 나옴 -> round함수를 이용해 숫자 나오기 전에 반올림해서 0으로 만든다.
round(1/49*49-1, 9)==0
[1] TRUE


#두 개가 같은 값이 나온다! 
filter(flights, month==11 | month==12)
filter(flights, month %in% c(11,12)) 
#month 변수에서 여러 달을 빼오고 싶을 때 month %in% c(2,4,7,8)

nov_dec <- filter(flights, month %in% c(11,12))


##missing value
a<-1
df<-tibble(x=c(1,NA,3))
df
filter(df, x>1)

# | : or의 뜻 / ,표시는 and의 뜻
filter(df, x>1|is.na(x))
filter(df, x>1, is.na(x))


#arrange함수: 지정한 변수의 크기 순으로 자료를 정렬하기
#flights 테이블을 날짜순으로 정렬하기
arrange(flights, year, month, day)
#연착된 시간순으로 보기(arrange에서 default: 오름차순)
arrange(flights, dep_delay)
#연착 시간순인데 내림차순으로. -> desc함수 사용
arrange(flights, desc(dep_delay))
#월별로 , 날짜는 내림차순으로 정리
arrange(flights, desc(day), month)

#arrange와 desc에서 NA값은 무조건 마지막 순서.
df <- tibble(x=c(5,2,NA))
arrange(df, x)
arrange(df, desc(x))


##select함수: 원하는 변수를 선택하여 출력
#flights에서 년도, 월, 일만 보고싶을 때
select(flights, year, month, day)
select(flights, year, day, month)

# : 표시 - 선택한 변수들 사이에 있는 모든 변수들을 선택함.
flights
#flights에서 year변수부터 arr_time변수까지 다 선택할 때
select(flights, year:arr_time)
#그 변수들만 빼는것도 됨. 변수 빼고 고를 때는 하나든 몇개든 괄호를 쳐줘야 한다!!!
select(flights, -(dep_time:arr_time))

#starts_with()인자: 해당하는 문자로 시작하는 변수만 뽑음.이 때 ""를 사용해야 함.
select(flights, starts_with("dep"))
#ends_with()인자: 해당하는 문자로 끝나는 변수만 뽑음. "" 사용해야함.
select(flights, ends_with("delay"))
#contains(): 해당하는 문자를 포함하는 변수만 뽑음. "" 사용
select(flights, contains("arr"))
select(flights, contains("arr_"))


#rename() : 변수이름 바꾸기
#tailnum 을 tail_num으로 바꾸기
rename(flights, tail_num=tailnum)


#View함수: 테이블을 새 창으로 띄워줌.
View(flights)

#everything() : 나머지 모든 변수를 의미.
#select함수에서 먼저 보고 싶은 변수를 고르고 everything()하면 원하는 변수를 먼저 보고 나머지는 뒤에 따라나옴.
select(flights, time_hour, dep_delay, everything())


df<- tibble(x=c(5,2,NA))
df
df$y <- LETTERS[1:3]

flights_sml <- select(flights, year:day,
                      ends_with("delay"), distance, air_time)


##mutate: 새로운 변수를 만들어 기존 자료에 추가하기
A <- mutate(flights_sml, 
       gain=arr_delay-dep_delay, 
       hours=air_time/60,
       gain_per_hour=gain/hours)
       )

##transmute: 기존 테이블 자료를 활용하되 새로 만든 변수만을 가지는 자료를 만듦.
transmute(flights_sml,
          gain=arr_delay-dep_delay,
          hours=air_time/60,
          gain_per_hour=gain/hours)
